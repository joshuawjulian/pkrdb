{"version":3,"sources":["../../src/holdem/action.ts","../../src/holdem/card.ts"],"sourcesContent":["import { z } from 'zod';\nimport { CardSchema } from './card.js';\n\nexport const PlayerFoldSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('fold'),\n});\nexport type PlayerFoldType = z.infer<typeof PlayerFoldSchema>;\nexport const PlayerCallSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('call'),\n\tamount: z.number(),\n\tisAllIn: z.boolean(),\n});\nexport type PlayerCallType = z.infer<typeof PlayerCallSchema>;\nexport const PlayerBetSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('bet'),\n\tamount: z.number(),\n\tisAllIn: z.boolean(),\n});\nexport type PlayerBetType = z.infer<typeof PlayerBetSchema>;\nexport const PlayerCheckSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('check'),\n});\nexport type PlayerCheckType = z.infer<typeof PlayerCheckSchema>;\nexport const PlayerBlindSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('blind'),\n\tamount: z.number(),\n\tisAllIn: z.boolean(),\n});\nexport type PlayerBlindType = z.infer<typeof PlayerBlindSchema>;\nexport const PlayerStraddleSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('straddle'),\n\tamount: z.number(),\n\tisAllIn: z.boolean(),\n});\nexport type PlayerStraddleType = z.infer<typeof PlayerStraddleSchema>;\n\nexport type PlayerIncreaseWagerType =\n\t| PlayerBetType\n\t| PlayerBlindType\n\t| PlayerStraddleType;\n\nexport const increaseWagerAction = (\n\taction: ActionType,\n): action is PlayerIncreaseWagerType => {\n\treturn (\n\t\taction.action === 'bet' ||\n\t\taction.action === 'blind' ||\n\t\taction.action === 'straddle'\n\t);\n};\n\n// player actions first\nexport const PlayerActionsSchema = z.discriminatedUnion('action', [\n\tPlayerBetSchema,\n\tPlayerBlindSchema,\n\tPlayerCallSchema,\n\tPlayerCheckSchema,\n\tPlayerFoldSchema,\n\tPlayerStraddleSchema,\n]);\n\n// These increase the bet size AND give action after being called\nexport const PlayerBlindActions = ['blind', 'straddle'] as const;\n\n// These attempt to close the action\nexport const PlayerCloseActions = ['check', 'call', 'fold'] as const;\n\nexport const DealerActionSchema = z.discriminatedUnion('action', [\n\tz.object({\n\t\taction: z.literal('preflop'),\n\t}),\n\tz.object({\n\t\taction: z.literal('flop'),\n\t\tflop: z.array(CardSchema).length(3),\n\t}),\n\tz.object({\n\t\taction: z.literal('turn'),\n\t\tturn: CardSchema,\n\t}),\n\tz.object({\n\t\taction: z.literal('river'),\n\t\triver: CardSchema,\n\t}),\n\tz.object({\n\t\taction: z.literal('showdown'),\n\t}),\n]);\n\nexport type PlayerActionType = z.infer<typeof PlayerActionsSchema>;\nexport type DealerActionType = z.infer<typeof DealerActionSchema>;\n\nexport const ActionSchema = z.discriminatedUnion('action', [\n\t...PlayerActionsSchema.options,\n\t...DealerActionSchema.options,\n]);\n\nexport type ActionType = z.infer<typeof ActionSchema>;\n\nexport const PlayerOptionFoldSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('fold'),\n});\nexport type PlayerOptionFoldType = z.infer<typeof PlayerOptionFoldSchema>;\n\nexport let PlayerOptionBlindSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('blind'),\n});\nexport type PlayerOptionBlindType = z.infer<typeof PlayerOptionBlindSchema>;\n\nexport let PlayerOptionStraddleSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('straddle'),\n});\nexport type PlayerOptionStraddleType = z.infer<\n\ttypeof PlayerOptionStraddleSchema\n>;\n\nexport const PlayerOptionCallSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('call'),\n\tamount: z.number(),\n\tisAllIn: z.boolean(),\n});\nexport type PlayerOptionCallType = z.infer<typeof PlayerOptionCallSchema>;\nexport const PlayerOptionBetSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('bet'),\n\tmin: z.union([z.number().min(0), z.literal('unknown')]),\n\tmax: z.union([z.number().min(0), z.literal('unknown')]),\n});\nexport type PlayerOptionBetType = z.infer<typeof PlayerOptionBetSchema>;\nexport const PlayerOptionCheckSchema = z.object({\n\tseat: z.number(),\n\taction: z.literal('check'),\n});\nexport type PlayerOptionCheckType = z.infer<typeof PlayerOptionCheckSchema>;\n\nexport const PlayerOptionSchema = z.discriminatedUnion('action', [\n\tPlayerOptionFoldSchema,\n\tPlayerOptionCallSchema,\n\tPlayerOptionBetSchema,\n\tPlayerOptionCheckSchema,\n\tPlayerOptionBlindSchema,\n\tPlayerOptionStraddleSchema,\n]);\n\nexport type PlayerOptionType = z.infer<typeof PlayerOptionSchema>;\n\nexport const DealerOptionSchema = z.discriminatedUnion('action', [\n\tz.object({\n\t\taction: z.literal('preflop'),\n\t}),\n\tz.object({\n\t\taction: z.literal('flop'),\n\t\tcards: z.literal(3),\n\t}),\n\tz.object({\n\t\taction: z.literal('turn'),\n\t\tcards: z.literal(1),\n\t}),\n\tz.object({\n\t\taction: z.literal('river'),\n\t\tcards: z.literal(1),\n\t}),\n\tz.object({\n\t\taction: z.literal('showdown'),\n\t}),\n]);\n\nexport const PokerRounds = ['preflop', 'flop', 'turn', 'river'] as const;\n\nexport type PokerRoundType = (typeof PokerRounds)[number];\n\nexport type DealerOptionType = z.infer<typeof DealerOptionSchema>;\n\nexport const NextOptionSchema = z.discriminatedUnion('action', [\n\t...PlayerOptionSchema.options,\n\t...DealerOptionSchema.options,\n]);\n\nexport type NextOptionType = z.infer<typeof NextOptionSchema>;\n\nexport const isPlayerAction = (\n\taction: ActionType,\n): action is PlayerActionType => {\n\treturn PlayerActionsSchema.safeParse(action).success;\n};\n\nexport const isDealerAction = (\n\taction: ActionType,\n): action is DealerActionType => {\n\treturn DealerActionSchema.safeParse(action).success;\n};\n\nexport let isPlayerOption = (\n\toption: NextOptionType,\n): option is PlayerOptionType => {\n\treturn PlayerOptionSchema.safeParse(option).success;\n};\n\nexport let isPlayerOptions = (\n\toptions: NextOptionType[],\n): options is PlayerOptionType[] => {\n\treturn z.array(PlayerOptionSchema).safeParse(options).success;\n};\n\nexport let isDealerOption = (\n\toption: NextOptionType,\n): option is DealerOptionType => {\n\treturn DealerOptionSchema.safeParse(option).success;\n};\n\nexport let isDealerOptions = (\n\toptions: NextOptionType[],\n): options is DealerOptionType[] => {\n\treturn z.array(DealerOptionSchema).safeParse(options).success;\n};\n\nexport let getNextRoundOption = (round: PokerRoundType): DealerOptionType => {\n\tif (round === 'preflop') {\n\t\treturn { action: 'flop', cards: 3 };\n\t} else if (round === 'flop') {\n\t\treturn { action: 'turn', cards: 1 };\n\t} else if (round === 'turn') {\n\t\treturn { action: 'river', cards: 1 };\n\t} else {\n\t\treturn { action: 'showdown' };\n\t}\n};\n\nexport let optionArrayToString = (options: NextOptionType[]): string[] => {\n\treturn options.reduce<string[]>(\n\t\t(acc, option) => [...acc, option.action],\n\t\tnew Array<string>(),\n\t);\n};\n","import { z } from 'zod';\n\nexport const CardRankSchema = z.union([\n\tz.literal('2'),\n\tz.literal('3'),\n\tz.literal('4'),\n\tz.literal('5'),\n\tz.literal('6'),\n\tz.literal('7'),\n\tz.literal('8'),\n\tz.literal('9'),\n\tz.literal('T'),\n\tz.literal('J'),\n\tz.literal('Q'),\n\tz.literal('K'),\n\tz.literal('A'),\n\tz.literal('X'),\n]);\n\nexport const CardSuitSchema = z.union([\n\tz.literal('s'),\n\tz.literal('h'),\n\tz.literal('d'),\n\tz.literal('c'),\n\tz.literal('x'),\n]);\n\nexport type CardSuitType = z.infer<typeof CardSuitSchema>;\n\nexport const CardSchema = z.object({\n\trank: CardRankSchema,\n\tsuit: CardSuitSchema,\n});\n\nexport type CardType = z.infer<typeof CardSchema>;\n\nexport let suitToCharacter = (suit: CardSuitType) => {\n\tswitch (suit) {\n\t\tcase 's':\n\t\t\treturn '♠';\n\t\tcase 'h':\n\t\t\treturn '♥';\n\t\tcase 'd':\n\t\t\treturn '♦';\n\t\tcase 'c':\n\t\t\treturn '♣';\n\t}\n\treturn 'x';\n};\n\nexport let cardToString = (card: CardType) => {\n\treturn card.rank + suitToCharacter(card.suit);\n};\n"],"mappings":"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","names":["z","z"]}