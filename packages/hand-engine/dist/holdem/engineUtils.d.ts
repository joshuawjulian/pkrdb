import { PlayerActionType, PokerRoundType, DealerActionType, PlayerIncreaseWagerType, ActionType } from './action.js';
import { GameStateType, StackType } from './state.js';
import 'zod';

declare let playerActionsCurrentRound: (state: GameStateType) => PlayerActionType[];
declare let getCurrentRound: (state: GameStateType) => PokerRoundType;
declare let getAllDealerActions: (state: GameStateType) => DealerActionType[];
declare let getIndexOfRoundStart: (state: GameStateType, round: PokerRoundType) => number;
declare let getSeatsAtThisRoundStart: (state: GameStateType) => number[];
declare let getSeatsAtRoundStart: (state: GameStateType, round: PokerRoundType) => number[];
declare let cycleSeats: (seats: number[]) => number[];
declare let findLargestBlind: (state: GameStateType) => number;
type LargestWagersType = Record<PokerRoundType, number[]>;
declare let largestWagersByRound: (state: GameStateType) => Record<PokerRoundType, number[]>;
type StacksAtRoundType = Record<PokerRoundType, StackType[]>;
declare let getStacksAtStartOfRound: (state: GameStateType) => StacksAtRoundType;
declare let getStacksAtStartOfCurrentRound: (state: GameStateType) => StackType[];
declare let getStacks: (state: GameStateType) => StackType[];
declare let getSeatOrder: (state: GameStateType) => number[];
declare let getWagers: (state: GameStateType) => PlayerIncreaseWagerType[];
declare let getLargestWagers: (state: GameStateType) => number[];
declare let getLargestWager: (state: GameStateType) => PlayerIncreaseWagerType | null;
declare let getLargestWagerAmount: (state: GameStateType) => number;
declare let getRemainingStacks: (state: GameStateType) => StackType[];
declare let getMinBet: (state: GameStateType) => number;
declare let getLargestStack: (state: GameStateType) => number;
declare let getMaxBet: (state: GameStateType) => number;
declare let getMinMaxBet: (state: GameStateType) => [number, number];
declare let hasNonBlindAction: (state: GameStateType) => boolean;
declare let hasNonBlindStraddleAction: (state: GameStateType) => boolean;
declare let actionComplete: (state: GameStateType) => boolean;
declare let numPlayersNotFolded: (state: GameStateType) => number;
declare let getSeatActions: (state: GameStateType) => Record<number, PlayerActionType[]>;
declare let validateAction: (state: GameStateType, nextAction: ActionType) => boolean | string;
declare let validateState: (state: GameStateType) => boolean | string;

export { type LargestWagersType, type StacksAtRoundType, actionComplete, cycleSeats, findLargestBlind, getAllDealerActions, getCurrentRound, getIndexOfRoundStart, getLargestStack, getLargestWager, getLargestWagerAmount, getLargestWagers, getMaxBet, getMinBet, getMinMaxBet, getRemainingStacks, getSeatActions, getSeatOrder, getSeatsAtRoundStart, getSeatsAtThisRoundStart, getStacks, getStacksAtStartOfCurrentRound, getStacksAtStartOfRound, getWagers, hasNonBlindAction, hasNonBlindStraddleAction, largestWagersByRound, numPlayersNotFolded, playerActionsCurrentRound, validateAction, validateState };
